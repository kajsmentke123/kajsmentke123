//signs - 5 bodov
int signs(const int a, const int b){
	if((a>0 && b>0) || (a<0 && b<0)){
		return 1;
	}
	if(a==0 || b==0){
		return 0;
	}
	return -1;
}

//even - 5 bodov
int even(const int num){
	if(num%2==0){
		return 1;
	}
	else{
		return 0;
	}
}

//is_white - 5 bodov
int is_white(const char c){
	if(c==' ' || c=='\n' || c=='\t'){
		return 1;
	}
	else{
		return 0;
	}
}

//karel_asleep - 5 bodov
int karel_asleep(const int position){
	if(position == '|'){
		return 0;
	}
	if(position == '-'){
		return 1;
	}
	return -1;
}

//is_triangle - 5 bodov
int is_triangle(const int alpha, const int beta, const int gamma){
	if( alpha<1 || beta<1 || gamma<1 ){
		return -1;
	} 
	if((alpha+beta+gamma)== 180){
		return 1;
	}
	return 0;
}

//sum_greater - 5 bodov
int sum_greater(const int a, const int b, const int c){
	if(a<b && a<c){
		return b+c;
	}
	if(b<a && b<c){
		return a+c;
	}
	return a+b;
}

//ul - 5 bodov
char ul(const char c){
	if(isupper(c)){
		return tolower(c);
	}
	return toupper(c);	
}

	//isFibDigits - 10 bodov	       
	int isFibDigits(const int *digits, const int size){
        int j = 0;
	        int num = 0;
        for(int i = size-1; i>=0; i--) {
	                num += digits[i] * pow(10,j);
	        j++;
	    }
	 
	        int num1 = 0;
	        int num2 = 1;
	 
	        while(1) {
	      if(num2 == num)
	        return 1;
	      if(num2 > num)
	        return 0;
	     
	      int tmp = num2;
	      num2 = num1 + num2;
	      num1 = tmp;
	    }
	}


int discriminant(const int a, const int b, const int c){
	return (b*b - 4*a*c);
	}
	
int isRightTriangle(const int a, const int b, const int c){
	int arr[3];
	arr[0] = a;
	arr[1] = b;
	arr[2] = c;
	for(int i = 1; i < 3; i++) {
	for(int j = 0; j < 2; j++) {
	if(arr[i] < arr[j]) {
	int tmp = arr[i];
	arr[i] = arr[j];
	arr[j] = tmp;
	        }	    
	}
}
		return (arr[2]*arr[2] == (arr[0]*arr[0] + arr[1]*arr[1]));
	}
	
int min(const int a, const int b, const int c){
	int arr[3];
	arr[0] = a;
	arr[1] = b;
	arr[2] = c;
	   for(int i = 1; i < 3; i++) {
	      for(int j = 0; j < 2; j++) {
	        if(arr[i] < arr[j]) {
	          int tmp = arr[i];
	          arr[i] = arr[j];
	          arr[j] = tmp;
	        }
	      }
	    }
	 
	        return arr[0];
	}
	
char last(const char* string){
	int i = 0;
	 for(i=0; string[i] != ‘\0‘; i++);
	 
	        return string[i-1];
	}
	
	
int isPalindrome(const char* string){
	 char str[strlen(string)];
	 int j = 0;
	 for(int i = strlen(string)-1; i >= 0; i--) {
               str[j] = string[i];
	        j++;
	        }
	        str[j] = ‘\0‘;
	 
	        return(strcmp(str, string) == 0);
	}
	
int isFib(const int num){
	int num1 = 0;
        int num2 = 1;
	 
	 while(1) 
	 {
	 if(num2 == num)
	        return 1;
	      if(num2 > num)
	        return 0;
	     
	      int tmp = num2;
	      num2 = num1 + num2;
	      num1 = tmp;
	    }
	}
	
float *roots(const int a, const int b, const int c){
	        int d = b*b - 4*a*c;
	 
	        float x1 = 0.0f;
	        float x2 = 0.0f;
	        if(d == 0) {
	                x1 = (float) (-b)/(2*a);
	        x2 = (float) (-b)/(2*a);
	    } else if (d > 0) {
	        x1 = (float) (-b - sqrt(d))/(2*a);
	        x2 = (float) (-b + sqrt(d))/(2*a);
		} else {
	      return NULL;
	    }
 
	        float* arr = (float*) malloc(2*sizeof(float));
	 
	        arr[0] = x1;
	        arr[1] = x2;
	 
	        return arr;
	}








	 


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
